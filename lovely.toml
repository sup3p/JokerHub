[manifest]
version = "1.0.0"
priority = -5


[[patches]]
[patches.pattern]
target = "functions/misc_callbacks.lua"
pattern = '''
white = G.C.WHITE,
'''
position = "at"
payload = '''
pink = G.C.PINK,
silver = G.C.SILVER,
'''
match_indent = true
times = 1

# -----------------------------------
# Orb of Confusion
# -----------------------------------
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "self.triggered = nil"
position = "after"
payload = '''
self.confusion = false
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:stay_flipped(area, card)"
position = "after"
payload = '''
if self.confusion and ((G.GAME.current_round.hands_played == 0 and G.GAME.current_round.discards_used == 0) or next(SMODS.find_card('j_paperback_the_world'))) then
	return true
end
'''
match_indent = true
times = 1

# -----------------------------------
# Going Viral
# -----------------------------------
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "local center = G.P_CENTERS.b_red"
position = "after"
payload = '''
if not forced_key then
	local going_viral = #(SMODS.find_card("j_jokerhub_going_viral", false))
	
	if going_viral > 0 --and (_type == 'Tarot' or _type == 'Spectral' or _type == 'Planet' or _type == 'Joker') 
	and (area == G.shop_jokers or area == G.pack_cards) then
		for i=1,going_viral do
			if pseudorandom(pseudoseed('going_viral'..G.GAME.round_resets.ante)) > 1 - (0.25 * G.GAME.probabilities.normal) then
				_type = 'Joker'
				forced_key = "j_jokerhub_going_viral"
				break
			end
		end
	end
end
'''
match_indent = true
times = 1

# -----------------------------------
# Broker
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "if G.GAME.dollars >= 5 and not G.GAME.modifiers.no_interest then"
position = "after"
payload = '''
if not next(SMODS.find_card("j_jokerhub_broker")) then
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "dollars = dollars + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)"
position = "after"
payload = '''
else
local brokers = SMODS.find_card("j_jokerhub_broker")
for i = 1, #brokers do
	brokers[i].ability.extra.chips = brokers[i].ability.extra.chips + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)*brokers[i].ability.extra.scaling*(G.GAME.soil_mod or 1)
	JHUB.scale_group_chat()
	SMODS.calculate_effect({
		message = localize('k_upgrade_ex'),
		colour = G.C.CHIPS,
		card = brokers[i]
	}, brokers[i])
end
end
'''
match_indent = true
times = 1


# -----------------------------------
# Film Deck
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
elseif v.in_pool and type(v.in_pool) == 'function' then
'''
position = "before"
payload = '''
elseif G.GAME.selected_back.effect.center.key == "b_jokerhub_film_deck" then
	eligible_bosses[k] = true
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
if ((G.GAME.dollars-G.GAME.bankrupt_at) - 10 >= 0) and
'''
position = "at"
payload = '''
local reroll_cost = (G.GAME.selected_back.effect.center.key == "b_jokerhub_film_deck") and 5 or 10
if ((G.GAME.dollars-G.GAME.bankrupt_at) - reroll_cost >= 0) and
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = '''
if not G.from_boss_tag then ease_dollars(-10) end
'''
position = "at"
payload = '''
local reroll_cost = (G.GAME.selected_back.effect.center.key == "b_jokerhub_film_deck") and 5 or 10
if not G.from_boss_tag then ease_dollars(-reroll_cost) end
'''
match_indent = true
times = 2

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''
UIBox_button({label = {localize('b_reroll_boss'), localize('$')..'10'}, button = "reroll_boss", func = 'reroll_boss_button'}) or nil
'''
position = "at"
payload = '''
UIBox_button({label = {localize('b_reroll_boss'), localize('$')..(G.GAME.selected_back.effect.center.key == "b_jokerhub_film_deck" and '5' or '10')}, button = "reroll_boss", func = 'reroll_boss_button'}) or nil
'''
match_indent = true
times = 1

# -----------------------------------
# Challenge Modifiers
# -----------------------------------

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
if forced_key and not G.GAME.banned_keys[forced_key] then
'''
position = "at"
payload = '''
if forced_key and (not G.GAME.banned_keys[forced_key] or (G.GAME.modifiers.jh_chef_ignores_bans and JHUB.contains(jh_get_food_jokers(), forced_key))) then 
'''
match_indent = true
times = 1


# -----------------------------------
# Face Value
# -----------------------------------

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
perma_bonus = self.ability and self.ability.perma_bonus or 0,
'''
position = "after"
payload = '''
jh_mult_perma_bonus = self.ability and self.ability.jh_mult_perma_bonus or 0,
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
bonus_chips = (self.ability.bonus + (self.ability.perma_bonus or 0)) > 0 and (self.ability.bonus + (self.ability.perma_bonus or 0)) or nil,
'''
position = "after"
payload = '''
jh_bonus_mult = (self.ability.jh_mult_perma_bonus or 0) > 0 and self.ability.jh_mult_perma_bonus or nil,
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
elseif _c.set == 'Enhanced' then 
'''
position = "before"
payload = '''
	if specific_vars.jh_bonus_mult then
		localize{type = 'other', key = 'jokerhub_card_extra_mult', nodes = desc_nodes, vars = {specific_vars.jh_bonus_mult}}
	end
'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''
elseif _c.set == 'Booster' then 
'''
position = "before"
payload = '''
	if specific_vars and specific_vars.jh_bonus_mult then
		localize{type = 'other', key = 'jokerhub_card_extra_mult', nodes = desc_nodes, vars = {specific_vars.jh_bonus_mult}}
	end
'''
match_indent = true
times = 1